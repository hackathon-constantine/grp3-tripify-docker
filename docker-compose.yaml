---

services:
  postgres:
    image: postgres:15-alpine
    container_name: smart-travel-postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 3
    restart: always

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9094:9094" 
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server localhost:9092
      interval: 10s
      timeout: 10s
      retries: 3
    restart: always

  server:
    build:
      context: ./smart_travel_agency/apps/server
      dockerfile: Dockerfile
    container_name: smart-travel-server
    ports:
      - "3000:3000"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      KAFKA_BROKERS: kafka:9092
      REDIS_HOST: redis 
      REDIS_PORT: 6379 
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis: 
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  admin:
    build:
      context: ./smart_travel_agency/apps/admin
      dockerfile: Dockerfile
    container_name: smart-travel-admin
    ports:
      - "3002:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://server:3000
    depends_on:
      server:
        condition: service_healthy
    restart: always

  client:
    build:
      context: ./smart_travel_agency/apps/client
      dockerfile: Dockerfile
    container_name: smart-travel-client
    ports:
      - "3003:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://server:3000
    depends_on:
      server:
        condition: service_healthy
    restart: always

  fabrid-service:
    build:
      context: ./smart_travel_agency/apps/fabrid_service
      dockerfile: Dockerfile
    container_name: smart-travel-fabrid-service
    ports:
      - "8080:8080"
    restart: always

  tools-service:
    build:
      context: ./smart_travel_agency/apps/tools-main
      dockerfile: Dockerfile
    container_name: smart-travel-tools-service
    ports:
      - "8001:8000"
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  ai-service:
    build:
      context: ./smart_travel_agency/apps/AI_Service
      dockerfile: Dockerfile
    container_name: smart-travel-ai-service
    ports:
      - "8000:8000"
    environment:
      KAFKA_BROKERS: kafka:9092
      REDIS_HOST: redis 
      REDIS_PORT: 6379 
      SERVER_URL: http://server:3000
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
    depends_on:
      kafka:
        condition: service_healthy
      server:
        condition: service_healthy
      postgres: 
        condition: service_healthy
      redis: 
        condition: service_healthy
    volumes:
      - ./smart_travel_agency/apps/AI_Service:/app
      - /app/.venv
    restart: always

  frontend:
    build:
      context: ./smart_travel_agency/apps/frontend
      dockerfile: Dockerfile
    container_name: smart-travel-frontend
    ports:
      - "80:3000"
      - "3001:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://server:3000
    depends_on:
      server:
        condition: service_healthy
    restart: always


volumes:
  postgres_data:
